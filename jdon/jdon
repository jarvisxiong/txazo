编程习惯:
1. 删除未使用代码
2. 添加代码注释
3. 重构代码
4. 类、方法、变量命名规范
5. 消除重复代码
6. 类职责分离、避免臃肿

软件复杂性:
1. 减少组件之间的交互

可扩展性: 高吞吐、低延迟

性能优化:
1. 异步: 队列、线程池
2. 数据源: 内存、磁盘、数据库、网络、缓存
3. 资源池化: 对象池、线程池、连接池

低延迟:
1. 内存/缓存
2. 控制线程上下文切换开销
3. 写操作批量化
4. 非阻塞
5. 异步
6. 并行

CAP原理
1. Consistency: 一致性
2. Availability: 可用性
3. Partition Tolerance: 分区容忍性
4. 三个要素最多只能同时实现两点, 不可能三者兼顾
5. 分布式系统: 分区容忍性是必须的, 牺牲一致性换取高可用性
6. 一致性问题: 并发读写, 保证最终一致性

异步
1. 请求响应模型(同步)
2. 事件驱动模型(异步)

响应式编程(Reactive)

Actor模型