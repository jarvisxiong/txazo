多线程并发编程
1) 线程间通信 - 共享内存模型 - 写－读
2) 线程间同步 - 共享内存模型 - 同步控制

Java内存模型－JMM
1) CPU - 线程 - 本地内存(共享变量副本) - JMM - 主内存(共享变量)
2) 读: 缓存行、缓存行填充、缓存行失效
3) 写: 写缓冲区

重排序
1) 编译器重排序
2) 处理器重排序

总结
1) 单线程
    1) 线程间通信: 无(无共享变量)
    2) 线程间同步: 无(非多线程程序)
    3) 编译器重排序: 重排序不改变单线程程序语义
    4) 处理器重排序: 重排序不改变单线程程序语义
2) 多线程
    1) 线程间通信: 共享变量
    2) 线程间同步: 同步控制
    3) 编译器重排序: 内存可见性
    4) 处理器重排序: 内存可见性

维度
1) 单线程 多线程
2) 线程间通信 线程间同步
3) 编译器重排序 处理器重排序
4) 顺序一致性内存模型 JMM内存模型 处理器内存模型
5) 内存可见性

----------********** 并发 **********----------

单线程
    1) 原子性: 无原子性问题
    2) 可见性: 无可见性问题
    3) 有序性
        1) 无数据依赖性: 允许编译器重排序和处理器重排序
        2) 有数据依赖性: 禁止编译器重排序和处理器重排序

多线程
    1) 原子性: cas synchronized
    2) 可见性: final volatile cas synchronized
    3) 有序性: final volatile cas synchronized

final
    1) 可见性: 初始化期间this引用不被溢出
    2) 有序性: 初始化后不可被改变

volatile
    1) 可见性
    2) 有序性

cas
    1) 原子性
    2) 可见性
    3) 有序性

synchronized
    1) 原子性
    2) 可见性
    3) 有序性

----------********** 并发 **********----------

----------********** 并发 **********----------
原子性
1) 单线程: 不存在原子性问题
2) 原子操作: 读 写
3) CAS实现原子操作
4) 原子操作类: 基于CAS
5) 锁实现原子操作: synchronized ReentrantLock

可见性
1) 单线程: 不存在可见性问题
2) final的可见性:
3) cas的可见性:
4) synchronized的可见性:
5) ReentrantLock的可见性:
6) Thread.start()的可见性:
7) Thread.join()的可见性:

有序性
1) 单线程: 禁止存在数据依赖性的操作重排序
2)
----------********** 并发 **********----------