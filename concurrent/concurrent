并发编程
1) 线程间通信(线程交换信息)
    1) 共享内存(隐式: 写－读)
    2) 消息传递(显式: 发送消息)
2) 线程间同步(线程操作顺序)
    1) 共享内存(显式: 同步代码)
    2) 消息传递(隐式: 发送－接收)

多线程－共享内存－JMM－主内存－共享变量

变量
1) 实例变量－多线程－线程不安全
2) 局部变量－单线程－线程安全

JMM(Java内存模型)
1) 内存模型: CPU－线程－本地内存(共享变量副本)－JMM－主内存(共享变量)
2) 本质: 线程通过主内存进行通信
3) 原则: 只要不改变程序的执行结果(单线程程序和正确同步的多线程程序)，编译器和处理器怎么优化都行

重排序
1) 编译器重排序: 单线程
2) 指令级重排序: 数据依赖性，常见处理器不允许数据依赖重排序
3) 内存级重排序: 内存读写，常见处理器允许Store-Load重排序

内存屏障
Store-Load Barriers
1) Store; StoreLoad; Load
2) StoreLoad之前所有Store/Load操作先于StoreLoad之后所有Store/Load操作，并可见

happens-before
1) 程序顺序规则: 单线程的操作 -> 后续任意操作
2) 监视器锁规则: 解锁 -> 加锁
3) volatile变量规则: volatile写 -> volatile读
4) 传递性: A happens-before B, B happens-before C -> A happens-before C
5) start()规则: ThreadA.start() -> ThreadA中的任意操作
6) join()规则: ThreadA中的任意操作 -> ThreadA.join()
7) happens-before语义
    1) A happens-before B，意味着A中对共享变量的写对B可见

数据依赖性
1) 定义: 两个操作访问同一变量，有一个为写操作，则这两个操作之间存在数据依赖性
2) 类型:
    1) 写－读
    2) 写－写
    3) 读－写
3) 单线程中，编译器和处理器不会重排序存在数据依赖性的两个操作
4) 程序员角度: 单线程按照程序的顺序执行

数据竞争
1) 一个线程写，另一个线程读，写和读没有同步

顺序一致性
1) 如果程序是正确同步的，程序的执行将具有顺序一致性，即程序的执行结果和顺序一致性的执行结果相同
   (同步包括CAS、volatile、final、synchroinzed等)
2) 特性:
    1) 单线程的所有操作按照程序的顺序执行
    2) 多线程中所有线程都只能看到一个单一的操作执行顺序(所有操作必须原子执行且立刻对所有线程可见)

volatile
1) 可见性: volatile写对任意线程的volatile读可见
2) 原子性: 不具有原子性
3) happens-before: volatile写 happens-before volatile读
4) volatile内存语义:
    1) volatile写，本地内存刷新到主内存，并通知其它处理器
    2) volatile读，本地内存置为无效，从主内存读取
5) 线程通信模型: 线程A写volatile变量，线程B读volatile变量，本质是线程A通过主内存向线程B发送消息
6) volatile内存语义实现
    1)

锁的内存语义
1) 可见性: 具有可见性
2) 原子性: 具有原子性
3) happens-before: 锁释放 happens-before 锁获取
4) 锁内存语义:
    1) 锁释放，本地内存刷新到主内存，并通知其它处理器
    2) 锁获取，本地内存置为无效，从主内存读取
5) 线程通信模型: 线程A释放锁，线程B获取锁，本质是线程A通过主内存向线程B发送消息
6) 锁内存语义实现:
    1) volatile
    2) CAS

concurrent包的实现
1) A线程写volatile变量，随后，B线程读这个volatile变量
2) A线程写volatile变量，随后，B线程用CAS更新这个volatile变量
3) A线程用CAS更新volatile变量，随后，B线程读这个volatile变量
4) A线程用CAS更新volatile变量，随后，B线程用CAS更新这个volatile变量

volatile写和锁的释放有相同的内存语义
volatile读和锁的获取有相同的内存语义
CAS同时具有volatile读和volatile写的内存语义

final的内存语义
1) 写final域: 禁止处理器把final域的写重排序到构造函数之外(保证final域的初始化)
2) 读final域: 禁止处理器重排序初次读对象引用与初次读该对象包含的final域
3) final引用不能从构造函数内溢出

会改变程序执行结果的重排序，JMM要求编译器和处理器必须禁止
不会改变程序执行结果的重排序，JMM对编译器和处理器不做要求(JMM允许这种重排序)

总结
1) Java是共享内存模型
2) 顺序一致性内存模型(理论参考模型) -> JMM内存模型(语言级) -> 处理器内存模型(硬件级)
3) 处理器内存模型允许写－读重排序(写缓冲区)
4) JMM内存模型，插入内存屏障
5) 单线程程序，不会出现内存可见性问题，
6) 正确同步的多线程程序，
7) 未正确同步的多线程程序，JMM提供最小安全保障